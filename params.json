{"name":"aster","tagline":"AST-based builder for JavaScript","body":"[![NPM version][npm-image]][npm-url]\r\n[![Build Status][travis-image]][travis-url]\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://avatars2.githubusercontent.com/u/6579498?s=300\" />\r\n</p>\r\n\r\n<h1 align=\"center\">aster - AST-based code builder</h1>\r\n\r\n## What's that\r\n\r\naster is reactive builder specialized for code processing and transformations. It's built with debugging in mind and makes building JavaScript code more reliable and faster.\r\n\r\n## Why one more\r\n\r\nSource maps are a great invention that is meant to simplify life by allowing developers to debug the original code (the one that they actually write, whatever language it is) on production.\r\n\r\nHowever, using them is pretty hard in any of existing build systems whenever you have at least one plugin in your build pipeline - and you most likely do - that doesn't support emitting them or even consuming from previous step; some plugins even treat code as simple strings discarding all it's inner logic and structure.\r\n\r\nYour code isn't just a string. It has a soul and rich inner world and aster is built to treat it like that. As result, it provides complex yet easy and fast transformations that are transparent for browser debugger out of the box.\r\n\r\nYou can think of aster for JS as of [rework](https://github.com/reworkcss/rework) for CSS.\r\n\r\n## But I like X builder! Should I throw it out?\r\n\r\nDefinitely no! aster doesn't try to fight your favorite build system. It has only one specific area that it's exceptionally good at - code processing. Everything else (CSS, images, publishing to CDN, etc.) is left for generic builders, and you can use them together.\r\n\r\nCurrently there are following bindings:\r\n\r\n * [grunt-aster](https://github.com/asterjs/grunt-aster) - binding for [Grunt](http://gruntjs.com/) JavaScript Task Runner.\r\n * [gulp-aster](https://github.com/asterjs/gulp-aster) - binding for [Gulp](http://gulpjs.com/) streaming build system.\r\n * ...more to come!\r\n\r\nIf you wish, you can define aster pipeline as custom task in any existing build system on your own since aster uses [RxJS](http://reactive-extensions.github.io/RxJS/) under the hood, which is interoperable with events, streams, promises, callbacks and any other asynchronous primitives and patterns out of the box.\r\n\r\n## API\r\n\r\naster is completely modular and main package is just a centralized API wrapper for core parts published as separate modules (check out their documentations for details):\r\n\r\n* [aster.src](https://github.com/asterjs/aster-src) - Single-pass source files reader.\r\n* [aster.watch](https://github.com/asterjs/aster-watch) - Continuous source files reader.\r\n* [aster.dest](https://github.com/asterjs/aster-dest) - File writer.\r\n* [aster.runner](https://github.com/asterjs/aster-runner) - Build pipeline runner with built-in logger.\r\n\r\n## Usage\r\n\r\nFirst, install `aster` as a development dependency:\r\n\r\n```shell\r\nnpm install --save-dev aster\r\n```\r\n\r\nThen, create build script and use it. Example (`require`s omitted):\r\n\r\n```javascript\r\naster.watch(['src/**/*.js', 'src/**/*.coffee', 'src/**/*.jsx'])\r\n.throttle(500)\r\n.map(changed(function (src) {\r\n  return src.map(equery({\r\n    'if ($cond) return $expr1; else return $expr2;':\r\n      'return <%= cond %> ? <%= expr1 %> : <%= expr2 %>'\r\n  }));\r\n}))\r\n.map(concat('built.js'))\r\n.map(umd({exports: 'superLib'}))\r\n.map(aster.dest('dist', {sourceMap: true}))\r\n.subscribe(aster.runner);\r\n```\r\n\r\naster doesn't provide task runner - npm is already good one, and we don't want to create one more bicycle. You can simply define every needed task as separate script, or use aster as part of exising builder as mentioned before.\r\n\r\n## License\r\n\r\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\r\n\r\n[npm-url]: https://npmjs.org/package/aster\r\n[npm-image]: https://badge.fury.io/js/aster.png\r\n\r\n[travis-url]: http://travis-ci.org/asterjs/aster\r\n[travis-image]: https://secure.travis-ci.org/asterjs/aster.png?branch=master\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}